upstream redis_cluster {
  nchan_redis_server redis://nchan-redis-server:6379;
  # you don't need to specify all the nodes, they will be autodiscovered
  # however, it's recommended that you do specify at least a few master nodes.
}

upstream api_accounts {
  server 127.0.0.1:3001;
}

server {
  listen 80;

  location = /auth {
    internal; #this location only accessible for internal nginx redirects
    proxy_pass http://api_accounts/api/idp/bus/auth;
    proxy_pass_request_body off;
    proxy_set_header Content-Length "";
    proxy_set_header X-Subscriber-Type $nchan_subscriber_type;
    proxy_set_header X-Publisher-Type $nchan_publisher_type;
    proxy_set_header X-Prev-Message-Id $nchan_prev_message_id;
    proxy_set_header X-Channel-Id $nchan_channel_id;
    proxy_set_header X-Original-URI $request_uri;
    proxy_set_header X-Forwarded-For $remote_addr;
  }

  # Private
#  location = /sub {
#    nchan_channel_id $arg_channel_id;
#    nchan_subscribe_request /upstream/sub;
#    nchan_unsubscribe_request /upstream/unsub;
#    #nchan_access_control_allow_origin "http://192.168.46.1:9000";
#    #nchan_authorize_request /auth;
#    nchan_subscribe_existing_channels_only on;
#    nchan_subscriber;
#    nchan_redis_pass redis_cluster;
#  }

  location ~ /pub/(\w+)$ {
    #publisher endpoint
    nchan_channel_id $1;
    nchan_publisher;
    nchan_authorize_request /auth;
    nchan_channel_group nchan;
    nchan_message_buffer_length $arg_max_msg;
    nchan_message_timeout $arg_ttl
    nchan_redis_pass redis_cluster;
    #nchan_publisher_upstream_request /upstream/pub;
  }

  # Private End

  location ~ /nchan/sub/user/(\w+)$ {
    nchan_channel_id $1;
    nchan_subscriber;
    nchan_subscribe_request /upstream/sub;
    nchan_unsubscribe_request /upstream/unsub;
    nchan_subscribe_existing_channels_only on;
    nchan_channel_group nchan;
    nchan_redis_pass redis_cluster;
  }

  location ~ /nchan/sub/shared/(\w+)$ {
    nchan_channel_id $1;
    nchan_subscriber;
    nchan_subscribe_request /upstream/sub;
    nchan_unsubscribe_request /upstream/unsub;
    nchan_subscribe_existing_channels_only on;
    nchan_channel_group nchan;
    nchan_redis_pass redis_cluster;
  }

  location = /nchan/nchan_stub_status {
    nchan_stub_status;
  }

  location = /upstream/pub {
    proxy_pass http://api_accounts/api/idp/bus/publish;
    proxy_set_header X-Publisher-Type $nchan_publisher_type;
    proxy_set_header X-Prev-Message-Id $nchan_prev_message_id;
    proxy_set_header X-Channel-Id $nchan_channel_id;
    proxy_set_header X-Original-URI $request_uri;
  }

  location = /upstream/unsub {
    internal;
    proxy_ignore_client_abort on;  #!!!important!!!!
    proxy_set_header X-Subscriber-Type $nchan_subscriber_type;
    proxy_set_header X-Message-Id $nchan_message_id;
    proxy_set_header X-Channel-Id $nchan_channel_id;
    proxy_set_header X-Original-URI $request_uri;
    proxy_pass http://api_accounts/api/idp/bus/unsubscribe;
  }
  location = /upstream/sub {
    internal;
    proxy_set_header X-Subscriber-Type $nchan_subscriber_type;
    proxy_set_header X-Message-Id $nchan_message_id;
    proxy_set_header X-Channel-Id $nchan_channel_id;
    proxy_set_header X-Original-URI $request_uri;
    proxy_pass http://api_accounts/api/idp/bus/subscribe;
  }
}